#!/usr/bin/python
import time
import logging
import sys

from simpleutil.config import cfg
from simpleutil.utils import table


from goperation.api.client.config import client_opts
from goperation.api.client.config import index_opts
from goperation.api.client import ManagerClient

from goperation.api.client.utils import prepare_results
from goperation.api.client.utils import wait_finish
from goperation.api.client.utils import p_asyncrequest

from gopcdn.api.client import GopCdnClient

CONF = cfg.CONF

resource_impl_opts = [
    cfg.StrOpt('impl',
               short='m',
               choices=['svn', 'git', 'http', 'sftp', 'websocket'],
               help='Resource Checkout/Upload impl, default value is None, means use saved impl',
               ),
]

impl_auth_opts = [
    cfg.StrOpt('uri',
               short='i',
               help='Cdn resource checkout uri'),
    cfg.StrOpt('username',
               short='u',
               help='Cdn resource checkout username'),
    cfg.StrOpt('password',
               short='p',
               help='Cdn resource checkout username'),
]

one_opts = [
    cfg.IntOpt('resource_id',
               short='r',
               required=True,
               help='Target cdnresource id'),
]

create_opts = [
    cfg.IntOpt('entity',
               short='e',
               required=True,
               help='Target cdndomain entity'),
    cfg.StrOpt('desc',
               help='Target cdnresource description'),
]

resource_opts = [
    cfg.StrOpt('name',
               short='n',
               help='Cdn resource name'),
    cfg.StrOpt('etype',
               short='t',
               help='Cdn resource type'),
]

version_opts = [
    cfg.StrOpt('rversion',
               required=True,
               help='Cdn resource version'),
]


def client(session=None):
    return GopCdnClient(httpclient=ManagerClient(url=CONF.gcenter, port=CONF.gcenter_port,
                                                 retries=CONF.retries, timeout=CONF.apitimeout,
                                                 token=CONF.trusted, session=session))


def list():
    CONF.register_cli_opts(index_opts)
    CONF.register_cli_opts(resource_opts)
    CONF(project='cmd')
    _client = client()

    body = dict()
    if CONF.name:
        body.setdefault('name', CONF.name)
    if CONF.etype:
        body.setdefault('etype', CONF.etype)
    if not body:
        body = None

    code, result, data = prepare_results(_client.cdnresource_index, body=body)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    cdnresource_heads = ['entity', 'resource_id', 'etype', 'name', 'status', 'impl', 'quotes']
    print('\033[1;32;40m')
    print 'List cdn domain resources success'
    print('\033[0m')
    tb = table.PleasantTable(ident=0, columns=cdnresource_heads, counter=True)
    for cdnresource in data:
        tb.add_row([cdnresource.get('entity'), cdnresource.get('resource_id'),
                    cdnresource.get('etype'), cdnresource.get('name'),
                    cdnresource.get('status'), cdnresource.get('impl'), cdnresource.get('quotes')])
    print tb.pformat()


def create():
    CONF.register_cli_opts(create_opts)
    CONF.register_cli_opts(resource_opts)
    CONF.register_cli_opts(resource_impl_opts)
    CONF.register_cli_opts(impl_auth_opts)
    CONF(project='cmd')

    auth = {}
    for opt in impl_auth_opts:
        auth.setdefault(opt.name, CONF[opt.name])
    if auth:
        for opt in impl_auth_opts:
            if opt.name not in auth:
                raise ValueError('Auth need %s' % opt.name)

    body = dict(impl=CONF.impl, entity=CONF.entity,
                name=CONF.name, etype=CONF.etype)
    if CONF.desc:
        body.setdefault('desc', CONF.desc)
    if auth:
        body.setdefault('auth', auth)

    _client = client()
    code, result, data = prepare_results(_client.cdnresource_create, body=body)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print('\033[1;32;40m')
    print 'Create cdndomain success'
    print('\033[0m')
    print 'entity: %d' % CONF.entity
    print 'etype: %s' % CONF.etype
    print 'name: %s' % CONF.name


def show():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.cdnresource_show, CONF.resource_id, body=dict(metadata=True))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)

    cdnresource = data[0]
    metadata = cdnresource.get('metadata')
    print('\033[1;32;40m')
    print 'Show cdnresource success'
    print 'resource_id: %d' % cdnresource.get('resource_id')
    print 'impl: %s' % cdnresource.get('impl')
    print 'etype: %s' % cdnresource.get('etype')
    print 'name: %s' % cdnresource.get('name')
    print 'base quote: %d' % cdnresource.get('quotes')
    print 'desc: %s' % cdnresource.get('desc')
    print '-----------Cdndomain Info-----------'
    print 'entity: %d' % cdnresource.get('entity')
    print 'internal: %s' % cdnresource.get('internal')
    print 'domains: %s' % str(cdnresource.get('domains'))
    print 'character_set: %s' % cdnresource.get('character_set')
    print 'port: %d' % cdnresource.get('port')
    print '-------------Agent Info-------------'
    print 'agent id: %d' % cdnresource.get('agent_id')
    print 'local_ip: %s' % metadata.get('local_ip')
    print 'external_ips: %s' % str(metadata.get('external_ips'))
    print('\033[0m')


def delete():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.cdnresource_delete, CONF.resource_id)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    cdndomain = data[0]
    print('\033[1;32;40m')
    print 'Delete cdndomain success'
    print 'entity: %d' % cdndomain.get('entity')
    print('\033[0m')


def marks():
    CONF.register_cli_opts(index_opts)
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.cdnresource_getremark, CONF.resource_id)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    cdnresource_heads = ['time', 'username', 'message']
    print('\033[1;32;40m')
    print 'List cdn domain resources marks success'
    print('\033[0m')
    tb = table.PleasantTable(ident=0, columns=cdnresource_heads, counter=True)
    for cdnresource in data:
        tb.add_row([cdnresource.get('time'), cdnresource.get('username'),
                    cdnresource.get('message')])
    print tb.pformat()


def upgrade():
    """upgrade and add new version of cdnresouce"""
    CONF.register_cli_opts(one_opts)
    CONF.register_cli_opts(version_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.cdnresource_upgrade, CONF.resource_id,
                                         body=dict(version=CONF.rversion,
                                                   detail=dict(msg='upgrade to %s by cmdline' % CONF.rversion)))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    asyncrequest = data[0]
    now = int(time.time())
    request_id = asyncrequest.get('request_id')
    sleep = now - asyncrequest.get('finishtime')
    dead = now - asyncrequest.get('deadline')
    print 'Cdnresource upgrade request %s has been sended' % request_id
    print 'Result will respon after %d, dead after %d' % (sleep, dead)
    if not wait_finish(_client, asyncrequest):
        print('\033[1;31;40m')
        print 'Async request not finish after deadline'
        print('\033[0m')
    p_asyncrequest(_client, request_id=request_id, details=False)


def remove():
    """remove version of cdnresource"""
    CONF.register_cli_opts(one_opts)
    CONF.register_cli_opts(version_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.cdnresource_getversion, CONF.resource_id,
                                         body=dict(version=CONF.rversion))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print('\033[1;32;40m')
    print 'Remove cdnresource version %s success' % CONF.rversion
    print 'resource_id: %d' % CONF.resource_id
    print 'version: %s' % CONF.rversion
    print('\033[0m')


def versions():
    """list versions of cdnresource"""
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.cdnresource_getversion, CONF.resource_id, body=dict(desc=True))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    if not data:
        print('\033[1;32;40m')
        print 'Show cdnresource versions success, No version found'
        print('\033[0m')
    versioninfo = data[0]
    quotes = versioninfo.get('quotes')
    print('\033[1;32;40m')
    print 'Show cdnresource versions success'
    print 'resource_id: %d' % versioninfo.get('resource_id')
    print 'version: %s' % versioninfo.get('version')
    print 'desc: %s' % versioninfo.get('desc')
    print 'version_id: %d' % versioninfo.get('version_id')
    print('\033[0m')
    if quotes:
        tb = table.PleasantTable(ident=8, columns=['quote_id', 'desc'], counter=True)
        for quote in quotes:
            tb.add_row([quote.get('quote_id'), quote.get('desc')])
        print tb.pformat()


def main():
    FUNCS = ['list', 'show', 'create', 'delete', 'marks', 'upgrade', 'remove', 'versions', 'files']

    try:
        func = sys.argv.pop(1)
        if func not in FUNCS:
            raise ValueError
    except (IndexError, ValueError):
        print 'action is: %s' % '  '.join(FUNCS)
        print 'use -h for help'
        sys.exit(1)
    func = eval(func)
    logging.basicConfig(level=logging.WARN)
    CONF.register_cli_opts(client_opts)
    func()


if __name__ == '__main__':
    main()
